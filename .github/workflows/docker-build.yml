name: Build and Push Docker Image

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

    - name: Test image
      if: github.event_name != 'pull_request'
      run: |
        # Create test environment
        echo "OFFICE365_TENANT_ID=test" > .env.test
        echo "OFFICE365_CLIENT_ID=test" >> .env.test  
        echo "OFFICE365_CLIENT_SECRET=test" >> .env.test
        echo "OFFICE365_SENDER_EMAIL=test@example.com" >> .env.test
        echo "GMAIL_RECIPIENT_EMAIL=test@gmail.com" >> .env.test
        echo "ZABBIX_SERVER=localhost" >> .env.test
        echo "TEST_INTERVAL=300" >> .env.test
        
        # Test container starts without errors
        docker run --rm --env-file .env.test ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest python -c "from email_delivery_monitor import EmailDeliveryMonitor; print('Import successful')"
